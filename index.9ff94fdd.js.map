{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/modules/Grid.class.js","src/modules/Cell.class.js","src/modules/TunnelBackground.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState){\n        this.inicialState = initialState;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.futureState = [];\n        this.score = 0;\n        this.status = \"idle\";\n        this.startGame = false;\n    }\n    slide(row) {\n        let filterRow = this.filterZero(row);\n        for(let i = 0; i < filterRow.length; i++)if (filterRow[i] === filterRow[i + 1]) {\n            filterRow[i] *= 2;\n            filterRow[i + 1] = 0;\n            this.score += filterRow[i];\n        }\n        filterRow = this.filterZero(filterRow);\n        while(filterRow.length < 4)filterRow.push(0);\n        return filterRow;\n    }\n    filterZero(row) {\n        return row.filter((item)=>item !== 0);\n    }\n    isEqual(fututreState, state) {\n        for(let row = 0; row < fututreState.length; row++)for(let cell = 0; cell < fututreState[row].length; cell++){\n            if (fututreState[row][cell] !== state[row][cell]) return false;\n        }\n        return true;\n    }\n    moveLeft() {\n        if (!this.startGame) return;\n        for(let r = 0; r < 4; r++){\n            let row = [\n                ...this.state[r]\n            ];\n            row = this.slide(row);\n            this.futureState[r] = row;\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveRight() {\n        if (!this.startGame) return;\n        for(let r = 0; r < 4; r++){\n            let row = [\n                ...this.state[r]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.futureState[r] = row;\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveUp() {\n        if (!this.startGame) return;\n        this.futureState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < 4; c++){\n            let row = [\n                this.futureState[0][c],\n                this.futureState[1][c],\n                this.futureState[2][c],\n                this.futureState[3][c]\n            ];\n            row = this.slide(row);\n            for(let r = 0; r < 4; r++)this.futureState[r][c] = row[r];\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    moveDown() {\n        if (!this.startGame) return;\n        this.futureState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < 4; c++){\n            let row = [\n                this.futureState[0][c],\n                this.futureState[1][c],\n                this.futureState[2][c],\n                this.futureState[3][c]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            for(let r = 0; r < 4; r++)this.futureState[r][c] = row[r];\n        }\n        if (this.isEqual(this.futureState, this.state)) return;\n        this.state = this.futureState.map((row)=>[\n                ...row\n            ]);\n        this.setTwo();\n        this.isWin(this.state);\n        if (this.isLose()) this.status = \"lose\";\n    }\n    start() {\n        this.status = \"playing\";\n        this.startGame = true;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.setTwo();\n        this.setTwo();\n    }\n    restart() {\n        this.status = \"idle\";\n        this.startGame = false;\n        this.state = this.inicialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n    }\n    setTwo() {\n        if (!this.hasEmptyTile()) return;\n        let found = false;\n        while(!found){\n            const r = Math.floor(Math.random() * 4);\n            const c = Math.floor(Math.random() * 4);\n            if (this.state[r][c] === 0) {\n                const value = Math.random() < 0.9 ? 2 : 4;\n                this.state[r][c] = value;\n                found = true;\n            }\n        }\n    }\n    hasEmptyTile() {\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (this.state[r][c] === 0) return true;\n        }\n        return false;\n    }\n    isWin(state) {\n        state.forEach((row)=>{\n            row.forEach((col)=>{\n                if (col === 2048) this.status = \"win\";\n            });\n        });\n    }\n    isLose() {\n        for (const row of this.state){\n            if (row.some((i)=>i === 0)) return false;\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        for(let c = 0; c < 4; c++){\n            const row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            for(let i = 0; i < row.length; i++){\n                if (row[i] === row[i + 1]) return false;\n            }\n        }\n        return true;\n    }\n    updateTile(tile, num) {\n        tile.innerText = \"\";\n        tile.classList.value = \"\";\n        tile.classList.add(\"field__cell\");\n        if (num > 0) {\n            tile.innerText = num;\n            tile.classList.add(\"field__cell--\" + num.toString());\n        }\n    }\n    updateScore(el) {\n        el.innerText = this.score;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    getStatus() {\n        return this.status;\n    }\n    setBestScore(score, user) {\n        user = parseInt(sessionStorage.getItem(\"user\"), 10);\n        if (isNaN(user) || user < score) sessionStorage.setItem(\"user\", score.toString());\n    }\n    getBestScore() {\n        const user = sessionStorage.getItem(\"user\");\n        return user ? parseInt(user, 10) : 0;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nvar $b7d3dd9be85ed02c$exports = {};\n\"use strict\";\nvar $03bae4f354eafb0f$exports = {};\n\"use strict\";\nclass $03bae4f354eafb0f$var$Cell {\n    constructor(field, x, y){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"field__cell\");\n        field.append(cell);\n        this.x = x;\n        this.y = y;\n        cell.id = `${this.y}-${this.x}`;\n    }\n}\n$03bae4f354eafb0f$exports = $03bae4f354eafb0f$var$Cell;\n\n\nconst $b7d3dd9be85ed02c$var$GRID_SIZE = 4;\nconst $b7d3dd9be85ed02c$var$CELL_COUNT = $b7d3dd9be85ed02c$var$GRID_SIZE * $b7d3dd9be85ed02c$var$GRID_SIZE;\nclass $b7d3dd9be85ed02c$var$Grid {\n    constructor(field){\n        this.cells = [];\n        for(let i = 0; i < $b7d3dd9be85ed02c$var$CELL_COUNT; i++)this.cells.push(new $03bae4f354eafb0f$exports(field, i % $b7d3dd9be85ed02c$var$GRID_SIZE, Math.floor(i / $b7d3dd9be85ed02c$var$GRID_SIZE)));\n        this.size = $b7d3dd9be85ed02c$var$GRID_SIZE;\n    }\n    initializeBoard() {\n        const board = [];\n        for(let i = 0; i < 4; i++)board.push(Array(4).fill(0));\n        return board;\n    }\n}\n$b7d3dd9be85ed02c$exports = $b7d3dd9be85ed02c$var$Grid;\n\n\nvar $201d9bc476d0ce8f$exports = {};\nclass $201d9bc476d0ce8f$var$TunnelBackground {\n    constructor(canvas){\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.centerX = this.width / 2;\n        this.centerY = this.height / 2;\n        this.dots = [];\n        this.maxDots = 150;\n        this.speed = 0.5;\n        this.resizeCanvas();\n        this.createDots();\n        this.animate();\n        window.addEventListener(\"resize\", ()=>this.resizeCanvas());\n    }\n    resizeCanvas() {\n        this.width = window.innerWidth;\n        this.height = window.innerHeight;\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.centerX = this.width / 2;\n        this.centerY = this.height / 2;\n    }\n    createDots() {\n        for(let i = 0; i < this.maxDots; i++)this.dots.push(this.createDot());\n    }\n    createDot() {\n        const angle = Math.random() * 2 * Math.PI;\n        const distance = Math.random() * (this.width / 2);\n        return {\n            x: Math.cos(angle) * distance + this.centerX,\n            y: Math.sin(angle) * distance + this.centerY,\n            radius: Math.random() * 2 + 1,\n            speed: Math.random() * this.speed + 0.5,\n            angle: angle,\n            distance: distance\n        };\n    }\n    updateDot(dot) {\n        dot.distance += dot.speed;\n        dot.x = Math.cos(dot.angle) * dot.distance + this.centerX;\n        dot.y = Math.sin(dot.angle) * dot.distance + this.centerY;\n        if (dot.x < 0 || dot.x > this.width || dot.y < 0 || dot.y > this.height) {\n            const angle = Math.random() * 2 * Math.PI;\n            dot.distance = 0;\n            dot.x = Math.cos(angle) * dot.distance + this.centerX;\n            dot.y = Math.sin(angle) * dot.distance + this.centerY;\n            dot.speed = Math.random() * this.speed + 0.5;\n        }\n    }\n    drawDot(dot) {\n        this.ctx.beginPath();\n        this.ctx.arc(dot.x, dot.y, dot.radius, 0, 2 * Math.PI);\n        this.ctx.fillStyle = \"#446583\";\n        this.ctx.fill();\n        this.ctx.closePath();\n    }\n    animate() {\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        this.dots.forEach((dot)=>{\n            this.updateDot(dot);\n            this.drawDot(dot);\n        });\n        requestAnimationFrame(()=>this.animate());\n    }\n}\n$201d9bc476d0ce8f$exports = $201d9bc476d0ce8f$var$TunnelBackground;\n\n\nconst $09e991522ca7e64e$var$canvas = document.getElementById(\"tunnel-background\");\nconst $09e991522ca7e64e$var$tunnelBackground = new $201d9bc476d0ce8f$exports($09e991522ca7e64e$var$canvas);\nconst $09e991522ca7e64e$var$gameElements = {\n    score: document.querySelector('[data-score=\"score\"]'),\n    best: document.querySelector('[data-best=\"best\"]'),\n    start: document.querySelector(\".button\"),\n    field: document.querySelector(\".field\"),\n    messageWin: document.querySelector(\".message__content--win\"),\n    messageLose: document.querySelector(\".message__content--lose\"),\n    messageStart: document.querySelector(\".message__content--start\"),\n    messageKeyboard: document.querySelector(\".message__content--keyboard\")\n};\nconst $09e991522ca7e64e$var$grid = new $b7d3dd9be85ed02c$exports($09e991522ca7e64e$var$gameElements.field);\nlet $09e991522ca7e64e$var$countKeyPress = 0;\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$grid.initializeBoard());\nlet $09e991522ca7e64e$var$bestScore = $09e991522ca7e64e$var$game.getBestScore();\nif ($09e991522ca7e64e$var$gameElements.best) $09e991522ca7e64e$var$gameElements.best.innerText = $09e991522ca7e64e$var$game.getBestScore();\nif ($09e991522ca7e64e$var$gameElements.score) $09e991522ca7e64e$var$gameElements.score.innerText = $09e991522ca7e64e$var$game.getScore();\nfunction $09e991522ca7e64e$var$updateElement() {\n    for(let r = 0; r < $09e991522ca7e64e$var$grid.size; r++)for(let c = 0; c < $09e991522ca7e64e$var$grid.size; c++){\n        const tile = document.getElementById(`${r}-${c}`);\n        const num = $09e991522ca7e64e$var$game.getState()[r][c];\n        $09e991522ca7e64e$var$game.updateTile(tile, num);\n    }\n    const currentScore = $09e991522ca7e64e$var$game.getScore();\n    if (currentScore > $09e991522ca7e64e$var$bestScore) {\n        $09e991522ca7e64e$var$bestScore = currentScore;\n        $09e991522ca7e64e$var$game.setBestScore($09e991522ca7e64e$var$bestScore);\n        $09e991522ca7e64e$var$gameElements.best.innerText = $09e991522ca7e64e$var$bestScore;\n    }\n}\n$09e991522ca7e64e$var$updateElement();\nfunction $09e991522ca7e64e$var$handleStartGame() {\n    if ($09e991522ca7e64e$var$gameElements.start.textContent === \"Start\") {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$updateElement();\n        $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameElements.score);\n        $09e991522ca7e64e$var$gameElements.messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$gameElements.messageKeyboard.classList.remove(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$gameElements.start.textContent === \"New Game\") {\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$gameElements.messageWin.classList.add(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$gameElements.messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$gameElements.start.innerText = \"Start\";\n        $09e991522ca7e64e$var$gameElements.start.classList.add(\"start\");\n        $09e991522ca7e64e$var$gameElements.start.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$countKeyPress = 0;\n        $09e991522ca7e64e$var$updateElement();\n        $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameElements.score);\n        $09e991522ca7e64e$var$gameElements.messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$gameElements.messageKeyboard.classList.add(\"hidden\");\n    }\n}\n$09e991522ca7e64e$var$gameElements.start.addEventListener(\"click\", $09e991522ca7e64e$var$handleStartGame);\n$09e991522ca7e64e$var$gameElements.messageStart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$handleStartGame();\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") e.preventDefault();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    if (!$09e991522ca7e64e$var$gameElements.messageKeyboard.classList.contains(\"hidden\")) $09e991522ca7e64e$var$gameElements.messageKeyboard.classList.add(\"hidden\");\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"playing\":\n            switch(e.code){\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n                default:\n                    break;\n            }\n            $09e991522ca7e64e$var$updateElement();\n            $09e991522ca7e64e$var$countKeyPress++;\n            break;\n        case \"win\":\n            $09e991522ca7e64e$var$gameElements.messageWin.classList.remove(\"hidden\");\n            break;\n        case \"lose\":\n            $09e991522ca7e64e$var$gameElements.messageLose.classList.remove(\"hidden\");\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$game.updateScore($09e991522ca7e64e$var$gameElements.score);\n    const user = window.localStorage.getItem(\"user\");\n    $09e991522ca7e64e$var$game.setBestScore($09e991522ca7e64e$var$game.getScore(), user);\n    if ($09e991522ca7e64e$var$countKeyPress >= 1) {\n        $09e991522ca7e64e$var$gameElements.start.innerText = \"New Game\";\n        $09e991522ca7e64e$var$gameElements.start.classList.remove(\"start\");\n        $09e991522ca7e64e$var$gameElements.start.classList.add(\"restart\");\n        $09e991522ca7e64e$var$gameElements.start.blur();\n    }\n});\n\n\n//# sourceMappingURL=index.9ff94fdd.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst Grid = require('../modules/Grid.class');\nconst TunnelBackground = require('../modules/TunnelBackground.class')\n\nconst canvas = document.getElementById('tunnel-background');\nconst tunnelBackground = new TunnelBackground(canvas);\n\nconst gameElements = {\n  score: document.querySelector('[data-score=\"score\"]'),\n  best: document.querySelector('[data-best=\"best\"]'),\n  start: document.querySelector('.button'),\n  field: document.querySelector('.field'),\n  messageWin: document.querySelector('.message__content--win'),\n  messageLose: document.querySelector('.message__content--lose'),\n  messageStart: document.querySelector('.message__content--start'),\n  messageKeyboard: document.querySelector('.message__content--keyboard'),\n};\n\nconst grid = new Grid(gameElements.field);\nlet countKeyPress = 0;\nconst game = new Game(grid.initializeBoard());\nlet bestScore = game.getBestScore();\n\nif (gameElements.best) {\n  gameElements.best.innerText = game.getBestScore();\n}\n\nif (gameElements.score) {\n  gameElements.score.innerText = game.getScore();\n}\n\nfunction updateElement() {\n  for (let r = 0; r < grid.size; r++) {\n    for (let c = 0; c < grid.size; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n      const num = game.getState()[r][c];\n\n      game.updateTile(tile, num);\n    }\n  }\n  const currentScore = game.getScore();\n  if (currentScore > bestScore) {\n    bestScore = currentScore;\n    game.setBestScore(bestScore);\n    gameElements.best.innerText = bestScore;\n  }\n}\n\nupdateElement();\n\nfunction handleStartGame() {\n  if (gameElements.start.textContent === 'Start') {\n    game.start();\n    updateElement();\n    game.updateScore(gameElements.score);\n    gameElements.messageStart.classList.add('hidden');\n    gameElements.messageKeyboard.classList.remove('hidden');\n  }\n\n  if (gameElements.start.textContent === 'New Game') {\n    if (game.getStatus() === 'win') {\n      gameElements.messageWin.classList.add('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      gameElements.messageLose.classList.add('hidden');\n    }\n    game.restart();\n    gameElements.start.innerText = 'Start';\n    gameElements.start.classList.add('start');\n    gameElements.start.classList.remove('restart');\n    countKeyPress = 0;\n    updateElement();\n    game.updateScore(gameElements.score);\n    gameElements.messageStart.classList.remove('hidden');\n    gameElements.messageKeyboard.classList.add('hidden');\n  }\n}\n\ngameElements.start.addEventListener('click', handleStartGame);\n\ngameElements.messageStart.addEventListener('click', () => {\n  handleStartGame();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n    e.preventDefault();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (!gameElements.messageKeyboard.classList.contains('hidden')) {\n    gameElements.messageKeyboard.classList.add('hidden');\n  }\n  \n  switch (game.getStatus()) {\n    case 'playing':\n      switch (e.code) {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n        default:\n          break;\n      }\n\n      updateElement();\n      countKeyPress++;\n      break;\n    case 'win':\n      gameElements.messageWin.classList.remove('hidden');\n      break;\n    case 'lose':\n      gameElements.messageLose.classList.remove('hidden');\n      break;\n    default:\n      break;\n  }\n\n  game.updateScore(gameElements.score);\n\n  const user = window.localStorage.getItem('user');\n\n  game.setBestScore(game.getScore(), user);\n\n  if (countKeyPress >= 1) {\n    gameElements.start.innerText = 'New Game';\n    gameElements.start.classList.remove('start');\n    gameElements.start.classList.add('restart');\n    gameElements.start.blur();\n  }\n});\n","'use strict';\n\nclass Game {\n  constructor(initialState) {\n    this.inicialState = initialState;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.futureState = [];\n    this.score = 0;\n    this.status = 'idle';\n    this.startGame = false;\n  }\n\n  slide(row) {\n    let filterRow = this.filterZero(row);\n\n    for (let i = 0; i < filterRow.length; i++) {\n      if (filterRow[i] === filterRow[i + 1]) {\n        filterRow[i] *= 2;\n        filterRow[i + 1] = 0;\n        this.score += filterRow[i];\n      }\n    }\n\n    filterRow = this.filterZero(filterRow);\n\n    while (filterRow.length < 4) {\n      filterRow.push(0);\n    }\n\n    return filterRow;\n  }\n\n  filterZero(row) {\n    return row.filter((item) => item !== 0);\n  }\n\n  isEqual(fututreState, state) {\n    for (let row = 0; row < fututreState.length; row++) {\n      for (let cell = 0; cell < fututreState[row].length; cell++) {\n        if (fututreState[row][cell] !== state[row][cell]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  moveLeft() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row = this.slide(row);\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveRight() {\n    if (!this.startGame) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      let row = [...this.state[r]];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n      this.futureState[r] = row;\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveUp() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row = this.slide(row);\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  moveDown() {\n    if (!this.startGame) {\n      return;\n    }\n\n    this.futureState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < 4; c++) {\n      let row = [\n        this.futureState[0][c],\n        this.futureState[1][c],\n        this.futureState[2][c],\n        this.futureState[3][c],\n      ];\n\n      row.reverse();\n      row = this.slide(row);\n\n      row.reverse();\n\n      for (let r = 0; r < 4; r++) {\n        this.futureState[r][c] = row[r];\n      }\n    }\n\n    if (this.isEqual(this.futureState, this.state)) {\n      return;\n    }\n\n    this.state = this.futureState.map((row) => [...row]);\n    this.setTwo();\n    this.isWin(this.state);\n\n    if (this.isLose()) {\n      this.status = 'lose';\n    }\n  }\n\n  start() {\n    this.status = 'playing';\n    this.startGame = true;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n\n    this.setTwo();\n    this.setTwo();\n  }\n\n  restart() {\n    this.status = 'idle';\n    this.startGame = false;\n    this.state = this.inicialState.map((row) => [...row]);\n    this.score = 0;\n  }\n\n  setTwo() {\n    if (!this.hasEmptyTile()) {\n      return;\n    }\n\n    let found = false;\n\n    while (!found) {\n      const r = Math.floor(Math.random() * 4);\n      const c = Math.floor(Math.random() * 4);\n\n      if (this.state[r][c] === 0) {\n        const value = Math.random() < 0.9 ? 2 : 4;\n\n        this.state[r][c] = value;\n\n        found = true;\n      }\n    }\n  }\n\n  hasEmptyTile() {\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (this.state[r][c] === 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isWin(state) {\n    state.forEach((row) => {\n      row.forEach((col) => {\n        if (col === 2048) {\n          this.status = 'win';\n        }\n      });\n    });\n  }\n\n  isLose() {\n    for (const row of this.state) {\n      if (row.some((i) => i === 0)) {\n        return false;\n      }\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    for (let c = 0; c < 4; c++) {\n      const row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      for (let i = 0; i < row.length; i++) {\n        if (row[i] === row[i + 1]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  updateTile(tile, num) {\n    tile.innerText = '';\n    tile.classList.value = '';\n    tile.classList.add('field__cell');\n\n    if (num > 0) {\n      tile.innerText = num;\n      tile.classList.add('field__cell--' + num.toString());\n    }\n  }\n\n  updateScore(el) {\n    el.innerText = this.score;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  setBestScore(score, user) {\n    user = parseInt(sessionStorage.getItem('user'), 10);\n\n    if (isNaN(user) || user < score) {\n      sessionStorage.setItem('user', score.toString());\n    }\n  }\n\n  getBestScore() {\n    const user = sessionStorage.getItem('user');\n    return user ? parseInt(user, 10) : 0;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n// import { Cell} from \"./Cell.class\";\n\nconst Cell = require('./Cell.class');\n\nconst GRID_SIZE = 4;\nconst CELL_COUNT = GRID_SIZE * GRID_SIZE;\n\nclass Grid {\n  constructor(field) {\n    this.cells = [];\n\n    for (let i = 0; i < CELL_COUNT; i++) {\n      this.cells.push(\n        new Cell(field, i % GRID_SIZE, Math.floor(i / GRID_SIZE))\n      );\n    }\n    this.size = GRID_SIZE;\n  }\n\n  initializeBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push(Array(4).fill(0));\n    }\n\n    return board;\n  }\n}\n\nmodule.exports = Grid;\n","'use strict';\n\nclass Cell {\n  constructor(field, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field__cell');\n    field.append(cell);\n    this.x = x;\n    this.y = y;\n    cell.id = (`${this.y}-${this.x}`);\n  }\n}\n\nmodule.exports = Cell;\n","class TunnelBackground {\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = this.canvas.getContext('2d');\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.centerX = this.width / 2;\n    this.centerY = this.height / 2;\n    this.dots = [];\n    this.maxDots = 150;\n    this.speed = 0.5;\n\n    this.resizeCanvas();\n    this.createDots();\n    this.animate();\n    window.addEventListener('resize', () => this.resizeCanvas());\n  }\n\n  resizeCanvas() {\n    this.width = window.innerWidth;\n    this.height = window.innerHeight;\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.centerX = this.width / 2;\n    this.centerY = this.height / 2;\n  }\n\n  createDots() {\n    for (let i = 0; i < this.maxDots; i++) {\n      this.dots.push(this.createDot());\n    }\n  }\n\n  createDot() {\n    const angle = Math.random() * 2 * Math.PI;\n    const distance = Math.random() * (this.width / 2);\n\n    return {\n      x: Math.cos(angle) * distance + this.centerX,\n      y: Math.sin(angle) * distance + this.centerY,\n      radius: Math.random() * 2 + 1,\n      speed: Math.random() * this.speed + 0.5,\n      angle: angle,\n      distance: distance\n    };\n  }\n\n  updateDot(dot) {\n    dot.distance += dot.speed;\n    dot.x = Math.cos(dot.angle) * dot.distance + this.centerX;\n    dot.y = Math.sin(dot.angle) * dot.distance + this.centerY;\n\n    if (\n      dot.x < 0 ||\n      dot.x > this.width ||\n      dot.y < 0 ||\n      dot.y > this.height\n    ) {\n      const angle = Math.random() * 2 * Math.PI;\n      dot.distance = 0;\n      dot.x = Math.cos(angle) * dot.distance + this.centerX;\n      dot.y = Math.sin(angle) * dot.distance + this.centerY;\n      dot.speed = Math.random() * this.speed + 0.5;\n    }\n  }\n\n  drawDot(dot) {\n    this.ctx.beginPath();\n    this.ctx.arc(dot.x, dot.y, dot.radius, 0, 2 * Math.PI);\n    this.ctx.fillStyle = '#446583';\n    this.ctx.fill();\n    this.ctx.closePath();\n  }\n\n  animate() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n    \n    this.dots.forEach((dot) => {\n      this.updateDot(dot);\n      this.drawDot(dot);\n    });\n\n    requestAnimationFrame(() => this.animate());\n  }\n}\n\nmodule.exports = TunnelBackground;\n"],"names":["$a5fd07fa01589658$exports","constructor","initialState","inicialState","state","map","row","futureState","score","status","startGame","slide","filterRow","filterZero","i","length","push","filter","item","isEqual","fututreState","cell","moveLeft","r","setTwo","isWin","isLose","moveRight","reverse","moveUp","c","moveDown","start","restart","hasEmptyTile","found","Math","floor","random","value","forEach","col","some","updateTile","tile","num","innerText","classList","add","toString","updateScore","el","getScore","getState","getStatus","setBestScore","user","isNaN","parseInt","sessionStorage","getItem","setItem","getBestScore","$b7d3dd9be85ed02c$exports","$03bae4f354eafb0f$exports","field","x","y","document","createElement","append","id","cells","$b7d3dd9be85ed02c$var$GRID_SIZE","size","initializeBoard","board","Array","fill","$201d9bc476d0ce8f$exports","canvas","ctx","getContext","width","window","innerWidth","height","innerHeight","centerX","centerY","dots","maxDots","speed","resizeCanvas","createDots","animate","addEventListener","createDot","angle","PI","distance","cos","sin","radius","updateDot","dot","drawDot","beginPath","arc","fillStyle","closePath","clearRect","requestAnimationFrame","getElementById","$09e991522ca7e64e$var$gameElements","querySelector","best","messageWin","messageLose","messageStart","messageKeyboard","$09e991522ca7e64e$var$grid","$09e991522ca7e64e$var$countKeyPress","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$bestScore","$09e991522ca7e64e$var$updateElement","currentScore","$09e991522ca7e64e$var$handleStartGame","textContent","remove","e","key","preventDefault","contains","code","localStorage","blur"],"version":3,"file":"index.9ff94fdd.js.map"}